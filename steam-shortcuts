#!/usr/bin/env python

import os
import sys
import vdf
import yaml
import zlib

STEAM_USER_DIRS = []

def shortcut_app_id(exe, name):
    crc_input = ''.join([exe, name])
    high_32 = zlib.crc32(crc_input.encode('utf-8')) | 0x80000000
    full_64 = (high_32 << 32) | 0x02000000
    return str(full_64)


"""
Returns the shortcut dictionary of the given app_id. If not found returns {}
"""
def match_app_id(sc, app_id):
    for s in sc:
        if 'Exe' in sc[s] and 'AppName' in sc[s]:
            if (shortcut_app_id(sc[s]['Exe'], sc[s]['AppName']) == app_id):
                return sc[s]
    return {}

"""
Creates a new shrotcut dictionary to be written later on the shortcut file.
If an application exists with the same app ID in the file, tries to update it.
"""
def create_shortcut(entry, steam_shortcuts):
    if 'name' not in entry:
        print('shortcut missing required field "name"; skipping')
        return
    if 'cmd' not in entry:
        print('shortcut missing required field "cmd"; skipping')
        return

    app_id = shortcut_app_id(entry['cmd'], entry['name'])

    shortcut = match_app_id(steam_shortcuts, app_id)
    shortcut['appid'] = app_id
    shortcut['AppName'] = entry['name']
    shortcut['Exe'] = entry['cmd']

    if 'dir' in entry:
        shortcut['StartDir'] = entry['dir']
    else:
        shortcut['StartDir'] = "~"

    if 'params' in entry:
        shortcut['LaunchOptions'] = entry['params']

    if 'hidden' in entry:
        shortcut['isHidden'] = entry['hidden']

    if 'icon' in entry:
        shortcut['icon'] = entry['icon']

    shortcut['AllowDesktopConfig'] = 1
    shortcut['AllowOverlay'] = 1
    shortcut['OpenVR'] = 0

    if 'tags' not in shortcut:
        shortcut['tags'] = {}

    if 'tags' in entry:
        entry['tags'].extend(shortcut['tags'].values())
        tags = set(entry['tags'])
        t = 0
        shortcut['tags'] = {}
        for tag in tags:
            shortcut['tags'][str(t)] = tag
            t += 1

    if 'banner' in entry:
        _, ext = os.path.splitext(entry['banner'])
        for user_dir in STEAM_USER_DIRS:
            dst_dir = user_dir + '/config/grid/'
            if not os.path.isdir(dst_dir):
                os.makedirs(dst_dir)
            dst = dst_dir + app_id + ext
            if os.path.islink(dst) or os.path.isfile(dst):
                os.remove(dst)
            os.symlink(entry['banner'], dst)

    if 'compat_tool' in entry:
        if app_id not in compat_data:
            compat_data[app_id] = {}
        compat_data[app_id]['compat_tool'] = entry['compat_tool']
        if 'compat_config' in entry:
            compat_data[app_id]['compat_config'] = entry['compat_config']

    return shortcut

def main():
    # Initialize all directories and files
    if 'XDG_CACHE_HOME' in os.environ:
        CACHE_HOME = os.environ['XDG_CACHE_HOME']
    else:
        CACHE_HOME = os.environ['HOME'] + '/.cache'

    compat_data = {}
    COMPAT_DATA_FILE = CACHE_HOME + '/steam-shortcuts-compat.yaml'

    if 'XDG_DATA_HOME' in os.environ:
        DATA_HOME = os.environ['XDG_DATA_HOME']
    else:
        DATA_HOME = os.environ['HOME'] + '/.local/share'

    DATA_HOME += '/'

    if not os.path.isdir(DATA_HOME + 'steam-shortcuts'):
        os.makedirs(DATA_HOME + 'steam-shortcuts')

    SHORTCUT_DIRS = [ DATA_HOME + 'steam-shortcuts' ]

    if os.path.isdir('/usr/share/steam-shortcuts'):
        SHORTCUT_DIRS.append('/usr/share/steam-shortcuts')

    STEAM_USER_BASE_DIR = DATA_HOME + 'Steam/userdata/'
    for d in os.listdir(STEAM_USER_BASE_DIR):
        if d == 'anonymous' or d == 'ac' or d == '0':
            continue
        path = STEAM_USER_BASE_DIR + d
        if os.path.isdir(path):
            STEAM_USER_DIRS.append(path)

    # Don't scan user directories if there are no shortcuts to create
    data = []
    for d in SHORTCUT_DIRS:
        for f in os.listdir(d):
            y = open(d + '/' + f)
            dd = yaml.load(y, Loader=yaml.FullLoader)
            if type(dd) is list:
                data = data + dd
            elif type(dd) is dict:
                data.append(dd)
            else:
                print("Error reading file " + d + "/" + f)  # Should not happen

    if len(data) == 0:
        sys.exit(1)

    yaml.dump(compat_data, open(COMPAT_DATA_FILE, 'w'), default_flow_style=False)

    # Get current shortcuts for each user
    for user_dir in STEAM_USER_DIRS:
        steam_shortcuts = {}
        file_path = user_dir + '/config/shortcuts.vdf'
        STEAM_SHORTCUT_FILE = file_path
        if os.path.isfile(file_path):
            s = vdf.binary_load(open(STEAM_SHORTCUT_FILE, 'rb'))
            if 'shortcuts' in s:
                steam_shortcuts = s['shortcuts']

        shortcuts = {}
        n = 0
        shortcut = None
        for entry in data:
            shortcut = create_shortcut(entry, steam_shortcuts)
            shortcuts[str(n)] = shortcut
            n += 1

        # Write the new file
        out = {}
        out['shortcuts'] = shortcuts
        b = vdf.binary_dumps(out)
        open(STEAM_SHORTCUT_FILE, 'wb').write(b)



main()
