#!/usr/bin/env python

import os
import sys
import vdf
import urllib.request

def apply_data(whitelist_file, tool_map, priority):
	if not os.path.isfile(whitelist_file):
		return

	data = vdf.load(open(whitelist_file))
	for key in data:
		if key not in tool_map or 'Priority' not in tool_map[key] or int(tool_map[key]['Priority']) <= priority:
			tool_map[key] = data[key]
			tool_map[key]['Priority'] = priority


if 'XDG_DATA_HOME' in os.environ:
	DATA_HOME = os.environ['XDG_DATA_HOME']
else:
	DATA_HOME = os.environ['HOME'] + '/.local/share'

if 'XDG_CONFIG_HOME' in os.environ:
	CONFIG_HOME = os.environ['XDG_CONFIG_HOME']
else:
	CONFIG_HOME = os.environ['HOME'] + '/.config'


MAIN_FILE  = DATA_HOME + '/proton-whitelist.vdf'
LOCAL_FILE = CONFIG_HOME + '/proton-whitelist.vdf' 

STEAM_DIR  = DATA_HOME + '/Steam/config'
STEAM_FILE = STEAM_DIR + '/config.vdf'


try:
	urllib.request.urlretrieve('https://gamer-os.github.io/proton-whitelist/proton-whitelist.vdf', MAIN_FILE)
except:
	print('failed to update whitelist')

if not os.path.isdir(STEAM_DIR):
	os.makedirs(STEAM_DIR)

if os.path.isfile(STEAM_FILE):
	steam_data = vdf.load(open(STEAM_FILE))
else:
	steam_data = vdf.VDFDict()
	steam_data['InstallConfigStore'] = { 'Software': { 'Valve': { 'Steam': {}}}}

steam = steam_data['InstallConfigStore']['Software']['Valve']['Steam']

if 'CompatToolMapping' not in steam:
	steam['CompatToolMapping'] = {}

tool_map = steam['CompatToolMapping']

apply_data(MAIN_FILE, tool_map, 209) # add global entries if file exists
apply_data(LOCAL_FILE, tool_map, 229) # add local entries if file exists

vdf.dump(steam_data, open(STEAM_FILE, 'w'), pretty=True)
